name: Repository Structure Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  structure-check:
    runs-on: ubuntu-latest
    name: Check Repository Structure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify top-level directory structure
        run: |
          echo "üèóÔ∏è  Checking top-level directory structure..."

          # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∫–æ—Ä–Ω–µ
          ALLOWED_DIRS="backend frontend scripts docs deployed .github .claude"

          # –ü–æ–∏—Å–∫ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
          DISALLOWED=""
          for dir in */; do
            if [ -d "$dir" ]; then
              dirname=$(basename "$dir")
              if ! echo "$ALLOWED_DIRS" | grep -q "$dirname"; then
                DISALLOWED="$DISALLOWED $dirname"
              fi
            fi
          done

          if [ -n "$DISALLOWED" ]; then
            echo "::error::Disallowed top-level directories found: $DISALLOWED"
            echo "::error::Allowed directories: $ALLOWED_DIRS"
            exit 1
          fi

          echo "‚úÖ Top-level structure is valid"

      - name: Check for deep relative imports in frontend
        run: |
          echo "üîç Checking for deep relative imports in frontend..."

          if find frontend -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | \
             xargs grep -l "\.\./\.\./\.\." 2>/dev/null; then
            echo "::error::Deep relative imports (../../..) found in frontend"
            echo "::error::Please use path aliases instead (@components, @utils, etc.)"
            exit 1
          fi

          echo "‚úÖ No deep relative imports found"

      - name: Check for relative imports that should use aliases
        run: |
          echo "üéØ Checking for imports that should use aliases..."

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª–∏–∞—Å—ã
          VIOLATIONS=""

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ utils
          if find frontend -name "*.js" -o -name "*.jsx" | \
             xargs grep -l "from ['\"]\.\..*utils/" 2>/dev/null; then
            VIOLATIONS="$VIOLATIONS utils"
          fi

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ components
          if find frontend -name "*.js" -o -name "*.jsx" | \
             xargs grep -l "from ['\"]\.\..*components/" 2>/dev/null; then
            VIOLATIONS="$VIOLATIONS components"
          fi

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ contexts
          if find frontend -name "*.js" -o -name "*.jsx" | \
             xargs grep -l "from ['\"]\.\..*contexts/" 2>/dev/null; then
            VIOLATIONS="$VIOLATIONS contexts"
          fi

          if [ -n "$VIOLATIONS" ]; then
            echo "::warning::Found relative imports that should use aliases for: $VIOLATIONS"
            echo "::warning::Run: node scripts/migration/fix_frontend_imports.js"
            # –ù–µ —Ñ–µ–π–ª–∏–º, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
          fi

          echo "‚úÖ Import structure checked"

      - name: Verify required configuration files
        run: |
          echo "üìã Checking required configuration files..."

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º jsconfig.json –¥–ª—è –∞–ª–∏–∞—Å–æ–≤
          if [ ! -f "frontend/jsconfig.json" ]; then
            echo "::error::frontend/jsconfig.json is missing"
            exit 1
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ jsconfig –µ—Å—Ç—å –∞–ª–∏–∞—Å—ã
          if ! grep -q "@components" "frontend/jsconfig.json"; then
            echo "::error::frontend/jsconfig.json missing path aliases"
            exit 1
          fi

          echo "‚úÖ Required configuration files present"

      - name: Check backend import structure
        run: |
          echo "üêç Checking backend import structure..."

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ backend
          if find backend -name "*.py" | \
             xargs grep -l "from \.\.\." 2>/dev/null; then
            echo "::warning::Deep relative imports found in backend"
            echo "::warning::Consider using absolute imports from backend root"
          fi

          echo "‚úÖ Backend structure checked"

  lint-check:
    runs-on: ubuntu-latest
    name: Lint and Format Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Check Python imports (if ruff available)
        run: |
          # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ruff
          if command -v ruff >/dev/null 2>&1; then
            cd backend
            ruff check --select I .
          else
            echo "‚ö†Ô∏è  ruff not available, skipping Python import checks"
          fi