import React, { useState, useEffect, useCallback } from 'react';
import { FaTelegram, FaCopy, FaRocket, FaComments } from 'react-icons/fa';
import {
  LoadingIcon,
  ActionIcon,
  ViewIcon,
  XIcon
} from './ui/icons';
import { HiEye } from 'react-icons/hi';

const TelegramPostEditor = ({
  draftId, // –î–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏ (draft-based)
  newsId, // ID –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
  newsData, // –î–∞–Ω–Ω—ã–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
  isLoading = false,
  onGenerate,
  onPostSaved, // Callback –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞
  existingPost = null, // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  isOpen = false, // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  onClose, // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  articleData // –î–ª—è backward compatibility
}) => {
  const [telegramPost, setTelegramPost] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [copySuccess, setCopySuccess] = useState(false);
  const [previewMode, setPreviewMode] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [articleUrl, setArticleUrl] = useState('');
  const [linkButtonText, setLinkButtonText] = useState('üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é');
  const [isPublishing, setIsPublishing] = useState(false);
  const [savedPostId, setSavedPostId] = useState(null);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞
  const [postSettings, setPostSettings] = useState({
    hook_type: 'question', // 'question', 'shocking_fact', 'statistics', 'contradiction'
    disclosure_level: 'hint', // 'hint', 'main_idea', 'almost_all'
    call_to_action: 'curiosity', // 'curiosity', 'urgency', 'expertise'
    include_image: true
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (existingPost) {
      setTelegramPost(existingPost.post_text);
      setPostSettings({
        hook_type: existingPost.hook_type,
        disclosure_level: existingPost.disclosure_level,
        call_to_action: existingPost.call_to_action,
        include_image: existingPost.include_image
      });
    }
  }, [existingPost]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è URL –∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–∏
  useEffect(() => {
    if (newsData && newsData.published_url) {
      setArticleUrl(newsData.published_url);
    }
  }, [newsData]);

  // –°—Ç–∞–±–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const handleTextChange = useCallback((e) => {
    setTelegramPost(e.target.value);
  }, []);

  const handleGenerate = async () => {
    if (!newsId && !draftId) {
      alert('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞');
      return;
    }

    setIsGenerating(true);
    try {
      // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
      if (newsId && newsData) {
        const response = await fetch(`/api/telegram-posts/news/${newsId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify({
            hook_type: postSettings.hook_type,
            disclosure_level: postSettings.disclosure_level,
            call_to_action: postSettings.call_to_action,
            include_image: postSettings.include_image,
            article_url: articleUrl
          })
        });

        const data = await response.json();

        if (response.ok) {
          setTelegramPost(data.post_text);
          if (onGenerate) {
            onGenerate(data.post_text);
          }
        } else {
          throw new Error(data.detail || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞');
        }
      }
      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è draft-based (–¥–ª—è backward compatibility)
      else if (draftId) {
        const response = await fetch(`/api/news-generation/generate-telegram-post/${draftId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify({
            settings: postSettings
          })
        });

        const data = await response.json();

        if (data.success) {
          setTelegramPost(data.telegram_post);
          if (onGenerate) {
            onGenerate(data.telegram_post);
          }
        } else {
          throw new Error(data.detail || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞');
        }
      }
    } catch (error) {
      console.error('Error generating Telegram post:', error);
      alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: ' + error.message);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSave = async () => {
    if (!telegramPost.trim()) {
      alert('–ü–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return null;
    }

    if (!newsId) {
      alert('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞');
      return null;
    }

    try {
      setIsGenerating(true);

      const response = await fetch(`/api/telegram-posts/news/${newsId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          hook_type: postSettings.hook_type,
          disclosure_level: postSettings.disclosure_level,
          call_to_action: postSettings.call_to_action,
          include_image: postSettings.include_image,
          article_url: articleUrl
        })
      });

      const data = await response.json();

      if (response.ok) {
        setSavedPostId(data.id);
        alert('Telegram –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
        if (onPostSaved) {
          onPostSaved(data);
        }
        if (onClose) {
          onClose();
        }
        return data.id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ—Å—Ç–∞
      } else {
        throw new Error(data.detail || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞');
      }
    } catch (error) {
      console.error('Error saving Telegram post:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞: ' + error.message);
      return null;
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(telegramPost);
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (error) {
      console.error('Failed to copy:', error);
    }
  };

  const handlePublish = async () => {
    if (!telegramPost.trim()) {
      alert('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      return;
    }

    if (!newsId && !existingPost) {
      alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞');
      return;
    }

    try {
      setIsPublishing(true);

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
      let postId = existingPost ? existingPost.id : savedPostId;

      if (!postId) {
        postId = await handleSave();
      }

      if (!postId) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      }

      // –ó–∞—Ç–µ–º –ø—É–±–ª–∏–∫—É–µ–º –≤ Telegram
      const response = await fetch(`/api/telegram-posts/${postId}/publish`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          post_text: telegramPost,
          article_url: articleUrl,
          link_button_text: linkButtonText
        })
      });

      const data = await response.json();

      if (response.ok) {
        alert('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram!');
        if (onPostSaved) {
          onPostSaved(data);
        }
      } else {
        throw new Error(data.detail || '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞');
      }
    } catch (error) {
      console.error('Error publishing to Telegram:', error);
      alert('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ' + error.message);
    } finally {
      setIsPublishing(false);
    }
  };

  const getCharCount = () => {
    return telegramPost.length;
  };

  const getCharCountClass = () => {
    const count = getCharCount();
    const minLength = 200;
    const maxLength = 350;

    if (count < minLength) return 'text-amber-600';
    if (count > maxLength) return 'text-red-600';
    return 'text-green-600';
  };

  const insertEmoji = (emoji) => {
    const textarea = document.getElementById('telegram-post-textarea');
    if (textarea) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const newText = telegramPost.substring(0, start) + emoji + telegramPost.substring(end);
      setTelegramPost(newText);
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
      setTimeout(() => {
        textarea.focus();
        textarea.setSelectionRange(start + emoji.length, start + emoji.length);
      }, 0);
    } else {
      setTelegramPost(telegramPost + emoji);
    }
  };

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤
  const medicalEmojis = [
    'ü©∫', 'üíä', 'üß¨', 'üî¨', 'üß™', 'ü©ª', 'ü´Ä', 'üß†',
    'üíâ', 'üè•', 'üë©‚Äç‚öïÔ∏è', 'üë®‚Äç‚öïÔ∏è', 'üìä', 'üìà', '‚öïÔ∏è', 'üîç',
    'üòä', 'üëç', 'üí™', '‚ú®', 'üéØ', 'üìù', 'üíØ', 'üôè'
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (Markdown-style)
  const parseFormattedText = (text) => {
    if (!text) return null;

    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = text.split('\n');

    return lines.map((line, lineIndex) => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (line.trim() === '') {
        return <div key={lineIndex} className="h-4">&nbsp;</div>;
      }

      // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ
      const parts = [];
      let currentText = '';
      let inBold = false;
      let inItalic = false;
      let inStrikethrough = false;
      let inCode = false;
      let i = 0;

      while (i < line.length) {
        const char = line[i];
        const nextChar = line[i + 1] || '';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (char === '*' && nextChar === '*') {
          // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **
          if (currentText) {
            parts.push({ text: currentText, bold: inBold, italic: inItalic, strikethrough: inStrikethrough, code: inCode });
            currentText = '';
          }
          inBold = !inBold;
          i += 2;
          continue;
        } else if (char === '*' && nextChar !== '*') {
          // –ö—É—Ä—Å–∏–≤ *
          if (currentText) {
            parts.push({ text: currentText, bold: inBold, italic: inItalic, strikethrough: inStrikethrough, code: inCode });
            currentText = '';
          }
          inItalic = !inItalic;
          i += 1;
          continue;
        } else if (char === '~' && nextChar === '~') {
          // –ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ~~
          if (currentText) {
            parts.push({ text: currentText, bold: inBold, italic: inItalic, strikethrough: inStrikethrough, code: inCode });
            currentText = '';
          }
          inStrikethrough = !inStrikethrough;
          i += 2;
          continue;
        } else if (char === '`') {
          // –ö–æ–¥ `
          if (currentText) {
            parts.push({ text: currentText, bold: inBold, italic: inItalic, strikethrough: inStrikethrough, code: inCode });
            currentText = '';
          }
          inCode = !inCode;
          i += 1;
          continue;
        } else {
          currentText += char;
          i += 1;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
      if (currentText) {
        parts.push({ text: currentText, bold: inBold, italic: inItalic, strikethrough: inStrikethrough, code: inCode });
      }

      // –°–æ–∑–¥–∞–µ–º JSX –¥–ª—è —Å—Ç—Ä–æ–∫–∏
      const lineContent = parts.map((part, partIndex) => {
        let className = '';
        if (part.bold) className += ' font-bold';
        if (part.italic) className += ' italic';
        if (part.strikethrough) className += ' line-through';
        if (part.code) className += ' font-mono bg-gray-100 px-1 rounded text-sm';

        return (
          <span key={partIndex} className={className.trim()}>
            {part.text}
          </span>
        );
      });

      return (
        <div key={lineIndex}>
          {lineContent}
        </div>
      );
    });
  };

  // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  if (isOpen) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]">
        <div className="bg-white rounded-lg shadow-xl w-full mx-4 max-w-7xl max-h-[95vh] overflow-y-auto">
          {/* Header –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
          <div className="sticky top-0 z-10 bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between">
            <div className="flex items-center gap-3">
              <FaTelegram className="text-blue-500 w-5 h-5" />
              <div>
                <h2 className="text-xl font-semibold text-gray-900">
                  {existingPost ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ø–æ—Å—Ç–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø–æ—Å—Ç–∞'}
                </h2>
                <p className="text-sm text-gray-600">
                  {newsData?.seo_title ? `${newsData.seo_title.substring(0, 60)}...` : '–ò–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –∞–Ω–æ–Ω—Å –¥–ª—è –∫–∞–Ω–∞–ª–∞'}
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 transition-colors p-2 rounded-lg hover:bg-gray-100"
              title="–ó–∞–∫—Ä—ã—Ç—å"
            >
              <XIcon  />
            </button>
          </div>

          {/* Content */}
          <div className="p-6">
            <TelegramPostEditorContent />
          </div>
        </div>
      </div>
    );
  }

  // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
  function TelegramPostEditorContent() {
    return (
      <div className="space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-blue-100 rounded-lg">
              <FaTelegram className="text-blue-600 w-4 h-4" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">–ü–æ—Å—Ç –¥–ª—è Telegram</h3>
              <p className="text-sm text-gray-600">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞</p>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <button
              onClick={() => setPreviewMode(!previewMode)}
              className="flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              <ViewIcon className="mr-2" />
              {previewMode ? '–†–µ–¥–∞–∫—Ç–æ—Ä' : '–ü—Ä–µ–≤—å—é'}
            </button>

            <button
              onClick={handleGenerate}
              disabled={isGenerating || isLoading}
              className="flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isGenerating ? (
                <>
                  <LoadingIcon className="animate-spin mr-2" />
                  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...
                </>
              ) : (
                <>
                  <ActionIcon className="mr-2" />
                  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
                </>
              )}
            </button>
          </div>
        </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä */}
        <div className="space-y-4">
          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç—Ä–∏–≥–∏ */}
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
            <h4 className="text-sm font-semibold text-blue-900 mb-3">üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç—Ä–∏–≥–∏</h4>

            <div className="grid grid-cols-1 gap-4 mb-4">
              <div>
                <label className="block text-xs font-medium text-blue-800 mb-1">–¢–∏–ø –∑–∞—Ü–µ–ø–∫–∏</label>
                <select
                  value={postSettings.hook_type}
                  onChange={(e) => setPostSettings(prev => ({...prev, hook_type: e.target.value}))}
                  className="w-full text-sm border border-blue-300 rounded px-2 py-1 bg-white"
                >
                  <option value="question">‚ùì –ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å</option>
                  <option value="shocking_fact">‚ö° –®–æ–∫–∏—Ä—É—é—â–∏–π —Ñ–∞–∫—Ç</option>
                  <option value="statistics">üìä –í–ø–µ—á–∞—Ç–ª—è—é—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</option>
                  <option value="contradiction">üîÑ –†–∞–∑–≤–µ–Ω—á–∞–Ω–∏–µ –º–∏—Ñ–∞</option>
                </select>
              </div>

              <div>
                <label className="block text-xs font-medium text-blue-800 mb-1">–£—Ä–æ–≤–µ–Ω—å —Ä–∞—Å–∫—Ä—ã—Ç–∏—è</label>
                <select
                  value={postSettings.disclosure_level}
                  onChange={(e) => setPostSettings(prev => ({...prev, disclosure_level: e.target.value}))}
                  className="w-full text-sm border border-blue-300 rounded px-2 py-1 bg-white"
                >
                  <option value="hint">üîç –¢–æ–ª—å–∫–æ –Ω–∞–º–µ–∫ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç—Ä–∏–≥–∞)</option>
                  <option value="main_idea">üí° –û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è (—Å—Ä–µ–¥–Ω—è—è –∏–Ω—Ç—Ä–∏–≥–∞)</option>
                  <option value="almost_all">üìñ –ü–æ—á—Ç–∏ –≤—Å—ë (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç—Ä–∏–≥–∞)</option>
                </select>
              </div>

              <div>
                <label className="block text-xs font-medium text-blue-800 mb-1">–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é</label>
                <select
                  value={postSettings.call_to_action}
                  onChange={(e) => setPostSettings(prev => ({...prev, call_to_action: e.target.value}))}
                  className="w-full text-sm border border-blue-300 rounded px-2 py-1 bg-white"
                >
                  <option value="curiosity">üßê –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ ("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Üí")</option>
                  <option value="urgency">‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å ("–ß–∏—Ç–∞—Ç—å —Å–µ–π—á–∞—Å ‚Üí")</option>
                  <option value="expertise">üéì –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å ("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ ‚Üí")</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-xs font-medium text-blue-800 mb-1">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é</label>
              <input
                type="url"
                value={articleUrl}
                onChange={(e) => setArticleUrl(e.target.value)}
                placeholder="https://example.com/—Å—Ç–∞—Ç—å—è"
                className="w-full text-sm border border-blue-300 rounded px-2 py-1 bg-white"
              />
              <p className="text-xs text-blue-600 mt-1">–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –∫–Ω–æ–ø–∫–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç–∞—Ç—å–µ</p>
            </div>

            <div>
              <label className="block text-xs font-medium text-blue-800 mb-1">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</label>
              <input
                type="text"
                value={linkButtonText}
                onChange={(e) => setLinkButtonText(e.target.value)}
                placeholder="üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é"
                className="w-full text-sm border border-blue-300 rounded px-2 py-1 bg-white"
              />
              <p className="text-xs text-blue-600 mt-1">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç–∞—Ç—å–µ</p>
            </div>

            <div className="space-y-3">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={postSettings.include_image}
                  onChange={(e) => setPostSettings(prev => ({...prev, include_image: e.target.checked}))}
                  className="rounded border-blue-300 text-blue-600 mr-2"
                />
                <span className="text-sm text-blue-700">–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å—Ç–∞—Ç—å–∏</span>
              </label>
            </div>
          </div>

          {/* –†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            </label>
            <textarea
              id="telegram-post-textarea"
              value={telegramPost}
              onChange={handleTextChange}
              placeholder={
                draftId
                  ? "–ù–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–∂–∏–º–∫–∏ —Å—Ç–∞—Ç—å–∏"
                  : newsId
                  ? "–ù–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω—Å–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"
                  : "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–∂–∏–º–∫—É —Å—Ç–∞—Ç—å–∏"
              }
              className="w-full h-48 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-sm leading-relaxed"
              disabled={!draftId && !newsId}
            />

            {/* –ü–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏ */}
            <div className="mt-2">
              <button
                type="button"
                onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                className="flex items-center px-2 py-1 text-sm text-gray-600 hover:text-gray-800 hover:bg-gray-50 rounded transition-colors"
              >
                <span className="mr-1">üòä</span>
                <span>–î–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏</span>
              </button>

              {showEmojiPicker && (
                <div className="mt-2 p-3 bg-gray-50 border border-gray-200 rounded-lg">
                  <div className="grid grid-cols-8 gap-1">
                    {medicalEmojis.map((emoji, index) => (
                      <button
                        key={index}
                        onClick={() => insertEmoji(emoji)}
                        className="w-8 h-8 w-4 h-4 hover:bg-gray-200 rounded transition-colors flex items-center justify-center"
                        title={`–î–æ–±–∞–≤–∏—Ç—å ${emoji}`}
                      >
                        {emoji}
                      </button>
                    ))}
                  </div>
                  <div className="mt-2 pt-2 border-t border-gray-300">
                    <p className="text-xs text-gray-500">
                      üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                    </p>
                  </div>
                </div>
              )}
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="flex items-center justify-between text-sm mt-2">
              <span className={`font-medium ${getCharCountClass()}`}>
                {getCharCount()}/350 —Å–∏–º–≤–æ–ª–æ–≤
              </span>
              <span className="text-gray-500">
                –ò–Ω—Ç—Ä–∏–≥–∞: 200-350 —Å–∏–º–≤–æ–ª–æ–≤
              </span>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex items-center space-x-3">
            <button
              onClick={handleCopy}
              disabled={!telegramPost.trim()}
              className="flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {copySuccess ? (
                <>
                  <CheckIconCircle className="mr-2 text-green-600" />
                  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ
                </>
              ) : (
                <>
                  <FaCopy className="mr-2" />
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </>
              )}
            </button>

            {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ */}
            {newsId && (
              <button
                onClick={handleSave}
                disabled={!telegramPost.trim() || isGenerating}
                className="flex items-center px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isGenerating ? (
                  <>
                    <LoadingIcon className="animate-spin mr-2" />
                    –°–æ—Ö—Ä–∞–Ω—è–µ–º...
                  </>
                ) : (
                  <>
                    <FaRocket className="mr-2" />
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç
                  </>
                )}
              </button>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram */}
            {newsId && (
              <button
                onClick={handlePublish}
                disabled={!telegramPost.trim() || isGenerating || isPublishing}
                className="flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isPublishing ? (
                  <>
                    <LoadingIcon className="animate-spin mr-2" />
                    –ü—É–±–ª–∏–∫—É–µ–º...
                  </>
                ) : (
                  <>
                    <FaTelegram className="mr-2" />
                    –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Telegram
                  </>
                )}
              </button>
            )}
          </div>

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç—Ä–∏–≥–µ */}
          <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
            <h4 className="text-sm font-semibold text-amber-900 mb-2">üéØ –ü—Ä–∏–Ω—Ü–∏–ø—ã –∏–Ω—Ç—Ä–∏–≥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞:</h4>
            <ul className="text-sm text-amber-800 space-y-1">
              <li>‚Ä¢ <strong>–ù–µ–¥–æ—Å–∫–∞–∑–∞–Ω–Ω–æ—Å—Ç—å</strong> ‚Äî –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –≤—Å—é —Å—É—Ç—å –≤ –ø–æ—Å—Ç–µ</li>
              <li>‚Ä¢ <strong>–ö—Ä—é—á–æ–∫</strong> ‚Äî –Ω–∞—á–Ω–∏ —Å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞</li>
              <li>‚Ä¢ <strong>–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ</strong> ‚Äî –∑–∞—Å—Ç–∞–≤—å —á–∏—Ç–∞—Ç–µ–ª—è –∑–∞—Ö–æ—Ç–µ—Ç—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ</li>
              <li>‚Ä¢ <strong>–ü—Ä–∏–∑—ã–≤</strong> ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–π —Ñ—Ä–∞–∑–æ–π "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Üí"</li>
              <li>‚Ä¢ <strong>–≠–º–æ–¥–∑–∏</strong> ‚Äî 1-2 –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö: ü©∫üß¨üíäüî¨üìä</li>
              <li>‚Ä¢ <strong>–¶–µ–ª—å</strong> ‚Äî –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç –∑–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</li>
            </ul>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–µ–≤—å—é */}
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü—Ä–µ–≤—å—é –≤ Telegram
            </label>

            {/* –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è Telegram –ø–æ—Å—Ç–∞ */}
            <div className="bg-green-100 rounded-3xl p-4" style={{background: 'linear-gradient(135deg, #c8e6c9 0%, #a5d6a7 100%)'}}>
              <div className="bg-white rounded-2xl shadow-lg overflow-hidden max-w-sm mx-auto" style={{maxWidth: '350px'}}>
                {telegramPost ? (
                  <div>
                    {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
                    {postSettings.include_image && (newsData?.generated_image_url || articleData?.image_url) && (
                      <div className="relative">
                        <img
                          src={newsData?.generated_image_url || articleData?.image_url}
                          alt="Article image"
                          className="w-full h-52 object-cover"
                          style={{borderRadius: '16px 16px 0 0'}}
                          onError={(e) => {
                            const parent = e.target.parentElement;
                            parent.innerHTML = `
                              <div class="w-full h-52 bg-gray-100 flex items-center justify-center" style="border-radius: 16px 16px 0 0">
                                <div class="text-center text-gray-400">
                                  <svg class="mx-auto h-10 w-10 mb-2" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" />
                                  </svg>
                                  <div class="text-sm">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div>
                                </div>
                              </div>
                            `;
                          }}
                        />
                      </div>
                    )}

                    {/* –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ */}
                    <div className="p-4">
                      <div className="text-base text-black leading-relaxed font-normal">
                        {parseFormattedText(telegramPost)}

                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –±—É–¥–µ—Ç –≤ –∏—Ç–æ–≥–æ–≤–æ–º –ø–æ—Å—Ç–µ */}
                        {articleUrl && (
                          <>
                            <div className="h-4">&nbsp;</div>
                            <div className="text-blue-500 underline cursor-pointer">
                              {linkButtonText}
                            </div>
                          </>
                        )}
                      </div>

                    </div>

                    {/* –†–µ–∞–∫—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                    <div className="px-4 pb-2">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <div className="flex items-center space-x-1 px-2 py-1 bg-red-50 rounded-full">
                            <span style={{fontSize: '14px'}}>‚ù§Ô∏è</span>
                            <span className="text-gray-700 font-medium text-sm">8</span>
                          </div>
                          <div className="flex items-center space-x-1 px-2 py-1 bg-blue-50 rounded-full">
                            <span style={{fontSize: '14px'}}>üëç</span>
                            <span className="text-gray-700 font-medium text-sm">8</span>
                          </div>
                          <div className="flex items-center space-x-1 px-2 py-1 bg-orange-50 rounded-full">
                            <span style={{fontSize: '14px'}}>üî•</span>
                            <span className="text-gray-700 font-medium text-sm">5</span>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2 text-xs text-gray-500">
                          <span className="flex items-center">
                            <HiEye className="w-4 h-4 mr-1" />
                            <span>1K</span>
                          </span>
                          <span>{new Date().toLocaleTimeString('ru', {hour: '2-digit', minute: '2-digit'})}</span>
                        </div>
                      </div>
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å */}
                    <div className="border-t border-gray-100">
                      <button className="w-full px-4 py-3 text-left flex items-center justify-between text-blue-600 hover:bg-gray-50 transition-colors">
                        <div className="flex items-center space-x-3">
                          <FaComments className="w-4 h-4" />
                          <span className="font-medium">–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
                        </div>
                        <span className="text-gray-400">‚Üí</span>
                      </button>
                    </div>
                  </div>
                ) : (
                  <div className="p-6 text-center">
                    <div className="mb-3">
                      <FaTelegram className="mx-auto w-8 h-8 text-gray-300" />
                    </div>
                    <div className="text-gray-500">
                      <div className="text-sm mb-1">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ</div>
                      <div className="text-sm font-medium">"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç"</div>
                      <div className="text-xs mt-2 opacity-70">
                        –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Ç–æ—á–Ω—ã–π –ø—Ä–µ–≤—å—é
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç—Ä–∏–≥–∏ */}
          {telegramPost && (
            <div className="bg-green-50 rounded-lg p-4">
              <h4 className="text-sm font-semibold text-green-900 mb-3">üéØ –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç—Ä–∏–≥–∏</h4>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-green-600">–î–ª–∏–Ω–∞:</span>
                  <span className={`ml-2 font-semibold ${getCharCountClass()}`}>
                    {getCharCount()}/350
                  </span>
                </div>
                <div>
                  <span className="text-green-600">–≠–º–æ–¥–∑–∏:</span>
                  <span className="ml-2 font-semibold text-green-900">
                    {(telegramPost.match(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu) || []).length}
                  </span>
                </div>
                <div>
                  <span className="text-green-600">–ü—Ä–∏–∑—ã–≤:</span>
                  <span className="ml-2 font-semibold text-green-900">
                    {telegramPost.includes('‚Üí') ? '‚úì' : '‚úó'}
                  </span>
                </div>
                <div>
                  <span className="text-green-600">–ò–Ω—Ç—Ä–∏–≥–∞:</span>
                  <span className="ml-2 font-semibold text-green-900">
                    {postSettings.disclosure_level === 'hint' ? '–í—ã—Å–æ–∫–∞—è' :
                     postSettings.disclosure_level === 'main_idea' ? '–°—Ä–µ–¥–Ω—è—è' : '–ù–∏–∑–∫–∞—è'}
                  </span>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
    );
  }

  return <TelegramPostEditorContent />;
};

export default TelegramPostEditor;