"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import os
import re
import sys
import logging
from typing import List, Dict, Any, Optional, Callable
from enum import Enum

logger = logging.getLogger(__name__)


class ValidationLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    REQUIRED = "required"  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - –±–µ–∑ –Ω–µ—ë —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    IMPORTANT = "important"  # –í–∞–∂–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    OPTIONAL = "optional"  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏


class EnvVariable:
    """–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    def __init__(
        self,
        name: str,
        level: ValidationLevel,
        description: str,
        validator: Optional[Callable[[str], bool]] = None,
        default_value: Optional[str] = None,
        example: Optional[str] = None
    ):
        self.name = name
        self.level = level
        self.description = description
        self.validator = validator or (lambda x: bool(x.strip()))
        self.default_value = default_value
        self.example = example


class EnvValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self, service_name: str):
        self.service_name = service_name
        self.variables: List[EnvVariable] = []
        self.errors: List[str] = []
        self.warnings: List[str] = []
        
    def add_variable(self, variable: EnvVariable):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        self.variables.append(variable)
        
    def add_required(self, name: str, description: str, validator: Optional[Callable[[str], bool]] = None, example: Optional[str] = None):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é"""
        self.add_variable(EnvVariable(name, ValidationLevel.REQUIRED, description, validator, example=example))
        
    def add_important(self, name: str, description: str, default_value: Optional[str] = None, validator: Optional[Callable[[str], bool]] = None):
        """–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é"""
        self.add_variable(EnvVariable(name, ValidationLevel.IMPORTANT, description, validator, default_value))
        
    def add_optional(self, name: str, description: str, default_value: Optional[str] = None):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é"""
        self.add_variable(EnvVariable(name, ValidationLevel.OPTIONAL, description, default_value=default_value))
        
    def validate(self) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, False –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        """
        self.errors.clear()
        self.warnings.clear()
        
        logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è {self.service_name}")
        
        for var in self.variables:
            self._validate_variable(var)
            
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._print_results()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        return len(self.errors) == 0
        
    def _validate_variable(self, var: EnvVariable):
        """–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é"""
        value = os.getenv(var.name, "").strip()
        
        if not value:
            if var.level == ValidationLevel.REQUIRED:
                message = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {var.name} –Ω–µ –∑–∞–¥–∞–Ω–∞! {var.description}"
                if var.example:
                    message += f" –ü—Ä–∏–º–µ—Ä: {var.example}"
                self.errors.append(message)
            elif var.level == ValidationLevel.IMPORTANT:
                message = f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {var.name} –Ω–µ –∑–∞–¥–∞–Ω–∞. {var.description}"
                if var.default_value:
                    message += f" –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {var.default_value}"
                self.warnings.append(message)
            # OPTIONAL –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            return
            
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
        try:
            if not var.validator(value):
                message = f"‚ùå –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò: {var.name} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. {var.description}"
                if var.level == ValidationLevel.REQUIRED:
                    self.errors.append(message)
                else:
                    self.warnings.append(message)
        except Exception as e:
            message = f"‚ùå –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò: {var.name} - –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: {e}"
            if var.level == ValidationLevel.REQUIRED:
                self.errors.append(message)
            else:
                self.warnings.append(message)
                
    def _print_results(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print(f"\n{'='*60}")
        print(f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò: {self.service_name}")
        print(f"{'='*60}")
        
        if not self.errors and not self.warnings:
            print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            return
            
        if self.errors:
            print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for error in self.errors:
                print(f"  {error}")
                
        if self.warnings:
            print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"  {warning}")
                
        if self.errors:
            print(f"\n‚ùå –°–ï–†–í–ò–° –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ó–ê–ü–£–©–ï–ù!")
            print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
        else:
            print(f"\n‚úÖ –°–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
            
    def validate_and_exit_on_error(self):
        """–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö"""
        if not self.validate():
            print(f"\nüí• {self.service_name} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            sys.exit(1)


# –ì–æ—Ç–æ–≤—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

def validate_url(url: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è URL"""
    if not url.strip():
        return False
    url_pattern = re.compile(
        r'^https?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return bool(url_pattern.match(url))


def validate_postgresql_url(url: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è PostgreSQL URL"""
    if not url.strip():
        return False
    return url.startswith(('postgresql://', 'postgres://'))


def validate_non_default_secret(secret: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π - –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏"""
    if not secret.strip():
        return False
    dangerous_defaults = [
        'your-secret-key',
        'change-in-production', 
        'your_openai_api_key_here',
        'your-jwt-secret-key'
    ]
    return not any(danger in secret.lower() for danger in dangerous_defaults)


def validate_openai_key(key: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è OpenAI API –∫–ª—é—á–∞"""
    if not key.strip():
        return False
    return key.startswith('sk-') and len(key) > 20


def validate_yandex_key(key: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è Yandex Cloud API –∫–ª—é—á–∞"""
    if not key.strip():
        return False
    return len(key) > 10  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã


def validate_folder_id(folder_id: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è Yandex Cloud Folder ID"""
    if not folder_id.strip():
        return False
    return len(folder_id) > 10  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã


def validate_boolean_env(value: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è boolean –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    return value.lower() in ('true', 'false', '1', '0', 'yes', 'no')


def validate_port(port: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Ä—Ç–æ–≤"""
    try:
        port_num = int(port)
        return 1 <= port_num <= 65535
    except (ValueError, TypeError):
        return False


# –ì–æ—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

def create_backend_validator() -> EnvValidator:
    """–°–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è backend —Å–µ—Ä–≤–∏—Å–∞"""
    validator = EnvValidator("Backend Service")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    validator.add_required(
        "DATABASE_URL", 
        "URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
        validate_postgresql_url,
        "postgresql://user:password@localhost:5432/news_aggregator"
    )
    
    validator.add_required(
        "JWT_SECRET_KEY",
        "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)",
        validate_non_default_secret,
        "dWiwTuG1vHPThqTiJhq-rfk691-L1tVDzCaJS_wvm6u..."
    )
    
    validator.add_required(
        "SECRET_KEY",
        "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)",
        validate_non_default_secret,
        "vGaQTU-xp-FBOQmZy8CKaBi7Putr6tSICrnNa9tk5L8"
    )
    
    validator.add_required(
        "OPENAI_API_KEY",
        "API –∫–ª—é—á OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        validate_openai_key,
        "sk-proj-..."
    )

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–µ–ø–µ—Ä—å –≤ backend)
    validator.add_important(
        "YC_FOLDER_ID",
        "Yandex Cloud Folder ID –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        default_value=None
    )

    validator.add_important(
        "YC_API_KEY",
        "Yandex Cloud API –∫–ª—é—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        default_value=None
    )
    
    # –í–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    validator.add_important(
        "ADMIN_USERNAME",
        "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "admin"
    )
    
    validator.add_important(
        "ADMIN_PASSWORD", 
        "–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–º–µ–Ω–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π)",
        "admin123"
    )
    
    validator.add_important(
        "CORS_ORIGINS",
        "–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è CORS (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)",
        "http://localhost:3000"
    )
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
    validator.add_optional("DEBUG", "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", "False")
    validator.add_optional("HOST", "–•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞", "0.0.0.0")
    validator.add_optional("PORT", "–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞", "8000")
    
    return validator




