#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.connection import engine
from database.models import User, UserRole, ProjectType
from services.auth_service import AuthService
from sqlmodel import Session, select
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_users():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with Session(engine) as session:
        stmt = select(User)
        users = session.exec(stmt).all()

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        for user in users:
            logger.info(f"  - {user.username} ({user.role}) - –ø—Ä–æ–µ–∫—Ç: {user.project}")

        return len(users)

def create_admin_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    with Session(engine) as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ admin
        stmt = select(User).where(User.username == "admin")
        existing_user = session.exec(stmt).first()

        if existing_user:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'admin' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return existing_user

        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
        hashed_password = AuthService.get_password_hash("admin123")
        admin_user = User(
            username="admin",
            role=UserRole.ADMIN,
            hashed_password=hashed_password,
            project=ProjectType.GYNECOLOGY  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )

        session.add(admin_user)
        session.commit()
        session.refresh(admin_user)

        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'admin' —Å –ø–∞—Ä–æ–ª–µ–º 'admin123'")
        return admin_user

def create_test_token():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    token = AuthService.create_access_token(data={"sub": "admin"})
    logger.info(f"üîë –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'admin':")
    logger.info(f"Bearer {token}")
    return token

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        user_count = check_users()

        if user_count == 0:
            logger.info("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞...")
            create_admin_user()

        logger.info("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
        create_test_token()

        logger.info("‚úÖ –ì–æ—Ç–æ–≤–æ!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())