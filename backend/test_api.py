#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import httpx
import asyncio
from models.schemas import BitrixProjectSettingsCreate

async def test_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"""
    base_url = "http://localhost:8000"

    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

    async with httpx.AsyncClient() as client:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        try:
            response = await client.get(f"{base_url}/api/settings/all")
            print(f"Status: {response.status_code}")
            if response.status_code != 200:
                print(f"Error: {response.text}")
            else:
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ Bitrix –ø—Ä–æ–µ–∫—Ç–æ–≤
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è Bitrix –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        try:
            response = await client.get(f"{base_url}/api/settings/bitrix-projects")
            print(f"Status: {response.status_code}")
            if response.status_code != 200:
                print(f"Error: {response.text}")
            else:
                data = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(data)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞ - –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 401)
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...")
        test_project = {
            "project_code": "TEST2",
            "project_name": "test2.site",
            "display_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç 2",
            "api_url": "http://test2.com/api",
            "api_token": "test_token_2",
            "iblock_id": 38,
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç 2"
        }

        try:
            response = await client.post(
                f"{base_url}/api/settings/bitrix-projects",
                json=test_project
            )
            print(f"Status: {response.status_code}")
            print(f"Response: {response.text}")

            if response.status_code == 401:
                print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            elif response.status_code == 500:
                print("‚ùå –û—à–∏–±–∫–∞ 500 - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            else:
                print(f"‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º...")
        token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTc1ODE0MDQ4MX0.U0YF1djcub5CxQFS_z0AEtsrhWcNGK71CAcN8O4OI3M"

        try:
            response = await client.post(
                f"{base_url}/api/settings/bitrix-projects",
                json=test_project,
                headers={"Authorization": f"Bearer {token}"}
            )
            print(f"Status: {response.status_code}")
            print(f"Response: {response.text}")

            if response.status_code == 201:
                print("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            elif response.status_code == 400:
                print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            elif response.status_code == 500:
                print("‚ùå –û—à–∏–±–∫–∞ 500 - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            else:
                print(f"‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (PUT)
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...")
        update_data = {
            "display_name": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
            "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        }

        try:
            response = await client.put(
                f"{base_url}/api/settings/bitrix-projects/TEST2",
                json=update_data,
                headers={"Authorization": f"Bearer {token}"}
            )
            print(f"Status: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {data.get('display_name')}")
            else:
                print(f"Response: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (DELETE)
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...")
        try:
            response = await client.delete(
                f"{base_url}/api/settings/bitrix-projects/TEST2",
                headers={"Authorization": f"Bearer {token}"}
            )
            print(f"Status: {response.status_code}")
            if response.status_code == 200:
                print("‚úÖ –ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"Response: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_api())