#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent
sys.path.insert(0, str(backend_path))

from database.connection import init_database, engine
from database.migration_tracker import MigrationTracker
from services.auth_service import auth_service
from services.settings_service import settings_service
from sqlmodel import text, Session
import time


def run_sql_file(file_path: Path, tracker: MigrationTracker):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL —Ñ–∞–π–ª —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–π"""
    if not file_path.exists():
        print(f"‚ùå SQL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    parts = file_path.stem.split('_')
    if not parts or not parts[0].isdigit():
        print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {file_path.name}")
        print("   –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: 01_description.sql")
        return False

    version = parts[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è
    if tracker.is_migration_applied(version):
        print(f"‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è {version} —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {file_path.name}")
        return True

    try:
        start_time = time.time()

        with open(file_path, 'r', encoding='utf-8') as f:
            sql_content = f.read()

        with Session(engine) as session:
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ ";"
            commands = [cmd.strip() for cmd in sql_content.split(';') if cmd.strip()]

            for command in commands:
                if command:
                    session.exec(text(command))

            session.commit()

        execution_time = int((time.time() - start_time) * 1000)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        # –û—Ç–º–µ—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—É—é
        tracker.mark_migration_applied(version, file_path.name, execution_time)

        print(f"‚úÖ SQL —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω–µ–Ω: {file_path.name} ({execution_time}ms)")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Ñ–∞–π–ª–∞ {file_path.name}: {e}")
        return False


def run_migrations():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–π"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π
        tracker = MigrationTracker(engine)

        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
        migrations_dir = Path(__file__).parent / "migrations"

        if not migrations_dir.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {migrations_dir}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–π
        if not tracker.validate_migration_sequence(migrations_dir):
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–π")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
        pending_migrations = tracker.get_pending_migrations(migrations_dir)

        if not pending_migrations:
            print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            return True

        print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(pending_migrations)} –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π")

        success_count = 0
        for migration_file in pending_migrations:
            print(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_file.name}")
            if run_sql_file(migration_file, tracker):
                success_count += 1
            else:
                print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_file.name}")
                break

        if success_count == len(pending_migrations):
            print(f"‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {success_count}/{len(pending_migrations)}")
            return True
        else:
            print(f"‚ùå –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {success_count}/{len(pending_migrations)}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False


def initialize_full_database():
    """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É —á–µ—Ä–µ–∑ SQLModel
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ SQLModel...")
        init_database()
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        print("2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...")
        run_migrations()
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print("3Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        settings_service.initialize_default_settings()
        
        # 4. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print("4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        auth_service.initialize_admin()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def show_migration_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
    try:
        tracker = MigrationTracker(engine)
        migrations_dir = Path(__file__).parent / "migrations"

        print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
        print("=" * 50)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
        history = tracker.get_migration_history()
        if history:
            print("\n‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for migration in history:
                print(f"  {migration['version']} - {migration['filename']} ({migration['applied_at']})")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        pending = tracker.get_pending_migrations(migrations_dir)
        if pending:
            print("\n‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:")
            for migration in pending:
                parts = migration.stem.split('_')
                version = parts[0] if parts and parts[0].isdigit() else "?"
                print(f"  {version} - {migration.name}")
        else:
            print("\n‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python migrate.py init     - –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î")
        print("  python migrate.py migrate  - –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏–π")
        print("  python migrate.py status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π")
        return

    command = sys.argv[1].lower()

    if command == "init":
        success = initialize_full_database()
    elif command == "migrate":
        success = run_migrations()
    elif command == "status":
        show_migration_status()
        success = True
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        return

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()