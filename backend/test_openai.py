#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã OpenAI API
"""

import os
import sys
import time
import httpx
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv(env_path)

API_KEY = os.getenv('OPENAI_API_KEY')
PROXY_URL = os.getenv('OPENAI_PROXY_URL')

print("=" * 60)
print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API")
print("=" * 60)
print(f"API Key: {'‚úÖ –ù–∞–π–¥–µ–Ω' if API_KEY else '‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω'}")
print(f"Proxy: {'‚úÖ ' + PROXY_URL[:30] + '...' if PROXY_URL else '‚ùå –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
print("=" * 60)

if not API_KEY:
    print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    sys.exit(1)


async def test_openai_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    print("\nüìù –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI API")
    print("-" * 60)

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "user", "content": "Say 'Hello, world!' in one word."}
        ],
        "max_tokens": 10,
        "temperature": 0.5
    }

    client_kwargs = {"timeout": httpx.Timeout(30.0)}
    if PROXY_URL:
        client_kwargs['proxy'] = PROXY_URL
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏")

    start_time = time.time()

    try:
        async with httpx.AsyncClient(**client_kwargs) as client:
            print(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å... (timeout: 30s)")
            response = await client.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json=payload
            )

            elapsed = time.time() - start_time
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed:.2f}s")
            print(f"Status: {response.status_code}")

            if response.status_code == 200:
                data = response.json()
                content = data["choices"][0]["message"]["content"]
                tokens = data.get("usage", {}).get("total_tokens", 0)
                print(f"üì§ –û—Ç–≤–µ—Ç: {content}")
                print(f"üé´ –¢–æ–∫–µ–Ω—ã: {tokens}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                return False

    except httpx.TimeoutException as e:
        elapsed = time.time() - start_time
        print(f"‚è±Ô∏è TIMEOUT –ø–æ—Å–ª–µ {elapsed:.2f}s")
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False
    except Exception as e:
        elapsed = time.time() - start_time
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {elapsed:.2f}s: {str(e)}")
        return False


async def test_openai_summarize():
    """–¢–µ—Å—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ—Ö–æ–∂–∏–º –Ω–∞ summarize_article"""
    print("\nüìù –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–∂–∏–º–∫–∏ (–∫–∞–∫ –≤ production)")
    print("-" * 60)

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "gpt-4o-mini",
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É —Å—Ç–∞—Ç—å–∏."
            },
            {
                "role": "user",
                "content": "–ó–∞–≥–æ–ª–æ–≤–æ–∫: –ù–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ –≤–ª–∏—è–Ω–∏–∏ –≤–∏—Ç–∞–º–∏–Ω–∞ D\n\n–¢–µ–∫—Å—Ç: –£—á–µ–Ω—ã–µ –ø—Ä–æ–≤–µ–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –≤–∏—Ç–∞–º–∏–Ω–∞ D –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç.\n\n–°–æ–∑–¥–∞–π JSON —Å –ø–æ–ª—è–º–∏ summary –∏ facts."
            }
        ],
        "max_tokens": 500,
        "temperature": 0.3
    }

    client_kwargs = {"timeout": httpx.Timeout(60.0)}
    if PROXY_URL:
        client_kwargs['proxy'] = PROXY_URL
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏")

    start_time = time.time()

    try:
        async with httpx.AsyncClient(**client_kwargs) as client:
            print(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å... (timeout: 60s)")
            response = await client.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json=payload
            )

            elapsed = time.time() - start_time
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed:.2f}s")
            print(f"Status: {response.status_code}")

            if response.status_code == 200:
                data = response.json()
                content = data["choices"][0]["message"]["content"]
                tokens = data.get("usage", {}).get("total_tokens", 0)
                print(f"üì§ –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {content[:200]}...")
                print(f"üé´ –¢–æ–∫–µ–Ω—ã: {tokens}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                return False

    except httpx.TimeoutException as e:
        elapsed = time.time() - start_time
        print(f"‚è±Ô∏è TIMEOUT –ø–æ—Å–ª–µ {elapsed:.2f}s")
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False
    except Exception as e:
        elapsed = time.time() - start_time
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {elapsed:.2f}s: {str(e)}")
        return False


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""

    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    test1_result = await test_openai_simple()

    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await asyncio.sleep(2)

    # –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –≤—ã–∂–∏–º–∫–∏
    test2_result = await test_openai_summarize()

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"–¢–µ—Å—Ç 1 (–ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å): {'‚úÖ PASSED' if test1_result else '‚ùå FAILED'}")
    print(f"–¢–µ—Å—Ç 2 (–≤—ã–∂–∏–º–∫–∞ —Å—Ç–∞—Ç—å–∏): {'‚úÖ PASSED' if test2_result else '‚ùå FAILED'}")
    print("=" * 60)

    if test1_result and test2_result:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 0
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
