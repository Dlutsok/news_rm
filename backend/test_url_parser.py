"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –ø–∞—Ä—Å–µ—Ä–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π
"""

import asyncio
from services.url_article_parser import url_parser
from database.schemas import ProjectType

# –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ URL
TEST_URLS = [
    "https://medscape.com/viewarticle/1000000",  # –ü—Ä–∏–º–µ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
    "https://www.sciencedaily.com/releases/2024/01/240101000000.htm",  # –ù–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    "https://pubmed.ncbi.nlm.nih.gov/",  # PubMed
]

async def test_parse_single_url():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ URL"""
    test_url = "https://news.ycombinator.com/"  # –ü—Ä–æ—Å—Ç–æ–π URL –¥–ª—è —Ç–µ—Å—Ç–∞

    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {test_url}")
    print("-" * 80)

    async with url_parser:
        result = await url_parser.parse_article(test_url)

        if result['success']:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ!")
            print(f"üìä URL: {result['url']}")
            print(f"üåê –î–æ–º–µ–Ω: {result['domain']}")
            print(f"üìù –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(result['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:")
            print(result['content'][:500])
            print("...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {result['error']}")

    print("-" * 80)

async def test_parse_multiple_urls():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    test_urls = [
        "https://news.ycombinator.com/",
        "https://github.com/",
        "https://stackoverflow.com/"
    ]

    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ {len(test_urls)} URL –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
    print("-" * 80)

    async with url_parser:
        results = await url_parser.parse_multiple_urls(test_urls)

        for i, result in enumerate(results, 1):
            print(f"\n{i}. {result['url']}")
            if result['success']:
                print(f"   ‚úÖ –£—Å–ø–µ—Ö - {len(result['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")

    print("-" * 80)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï URL ARTICLE PARSER")
    print("=" * 80)
    print()

    # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ URL
    await test_parse_single_url()
    print()

    # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL
    await test_parse_multiple_urls()
    print()

    print("=" * 80)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())
