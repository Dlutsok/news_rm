"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –ø–æ—Å—Ç–∞–º–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
"""

import logging
from datetime import datetime
from typing import List, Optional
from fastapi import APIRouter, HTTPException, Depends, BackgroundTasks
from sqlmodel import Session, select

from database.connection import get_session
from database.models import (
    TelegramPost, TelegramPostRead, TelegramPostCreate, TelegramPostSettings,
    NewsGenerationDraft, User, ExpenseType, ProjectType
)
from pydantic import BaseModel
from api.dependencies import get_current_user_optional
from services.ai_service import get_ai_service
from api.news_generation import send_to_telegram
from api.expenses import auto_create_expense

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/telegram-posts", tags=["telegram-posts"])


class TelegramPublishRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞ –≤ Telegram"""
    post_text: str
    article_url: Optional[str] = None
    link_button_text: str = "üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é"


@router.get("/news/{news_draft_id}", response_model=List[TelegramPostRead])
async def get_telegram_posts_for_news(
    news_draft_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user_optional)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ Telegram –ø–æ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    news_draft = session.get(NewsGenerationDraft, news_draft_id)
    if not news_draft:
        raise HTTPException(status_code=404, detail="–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –î–ª—è –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
    if not news_draft.is_published:
        return []

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Telegram –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    statement = select(TelegramPost).where(TelegramPost.news_draft_id == news_draft_id)
    telegram_posts = session.exec(statement).all()

    return telegram_posts


@router.post("/news/{news_draft_id}", response_model=TelegramPostRead)
async def create_telegram_post(
    news_draft_id: int,
    settings: TelegramPostSettings,
    background_tasks: BackgroundTasks,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user_optional)
):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Telegram –ø–æ—Å—Ç –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    news_draft = session.get(NewsGenerationDraft, news_draft_id)
    if not news_draft:
        raise HTTPException(status_code=404, detail="–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞
    if not news_draft.is_published:
        raise HTTPException(status_code=400, detail="–ù–æ–≤–æ—Å—Ç—å –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    from database.models import Article
    article = session.get(Article, news_draft.article_id)
    if not article:
        raise HTTPException(status_code=404, detail="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Telegram –ø–æ—Å—Ç —Å –ø–æ–º–æ—â—å—é AI
        ai_service = get_ai_service()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        published_url = settings.article_url

        if not published_url and news_draft.bitrix_id:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            # TODO: –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑ Bitrix API
            project_urls = {
                "gynecology.school": f"https://gynecology.school/content/articles/news/{news_draft.bitrix_id}/",
                "therapy.school": f"https://therapy.school/content/articles/news/{news_draft.bitrix_id}/",
                "pediatrics.school": f"https://pediatrics.school/content/articles/news/{news_draft.bitrix_id}/"
            }
            published_url = project_urls.get(news_draft.project)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è AI
        news_data = {
            "seo_title": news_draft.generated_seo_title or article.title,
            "news_text": news_draft.generated_news_text or article.content,
            "image_url": news_draft.generated_image_url,
            "project": news_draft.project,
            "published_url": published_url
        }

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è AI
        from services.ai_service import TelegramPostSettings
        ai_settings = TelegramPostSettings(
            hook_type=settings.hook_type,
            disclosure_level=settings.disclosure_level,
            call_to_action=settings.call_to_action,
            includeImage=settings.include_image  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
        post_text, metrics = await ai_service.generate_telegram_post_for_published(
            news_data=news_data,
            settings=ai_settings
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        telegram_post = TelegramPost(
            news_draft_id=news_draft_id,
            hook_type=settings.hook_type,
            disclosure_level=settings.disclosure_level,
            call_to_action=settings.call_to_action,
            include_image=settings.include_image,
            post_text=post_text,
            character_count=len(post_text),
            is_published=False,  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            created_by=current_user.id if current_user else None
        )

        session.add(telegram_post)
        session.commit()
        session.refresh(telegram_post)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"Created telegram post: id={telegram_post.id}, news_id={news_draft_id}")
        logger.info(f"Telegram post fields: hook_type={telegram_post.hook_type}, is_published={telegram_post.is_published}, created_at={telegram_post.created_at}")

        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ Telegram –ø–æ—Å—Ç–∞
        if current_user:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                project_type = None
                if news_draft.project:
                    try:
                        project_type = ProjectType(news_draft.project)
                    except ValueError:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ enum, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if current_user.project:
                            try:
                                project_type = ProjectType(current_user.project)
                            except ValueError:
                                project_type = ProjectType.THERAPY  # fallback
                        else:
                            project_type = ProjectType.THERAPY  # fallback

                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥
                await auto_create_expense(
                    user_id=current_user.id,
                    project=project_type,
                    expense_type=ExpenseType.TELEGRAM_POST,
                    description=f"–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø–æ—Å—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏ ID: {news_draft.article_id}",
                    related_article_id=news_draft.article_id,
                    session=session
                )
                logger.info(f"Created expense for Telegram post creation: user={current_user.id}, article={news_draft.article_id}")
            except Exception as expense_error:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
                logger.error(f"Failed to create expense for Telegram post creation: {expense_error}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        logger.info(f"Returning telegram post: {telegram_post}")
        logger.info(f"Post fields before return: id={getattr(telegram_post, 'id', 'MISSING')}, created_at={getattr(telegram_post, 'created_at', 'MISSING')}, updated_at={getattr(telegram_post, 'updated_at', 'MISSING')}")
        
        return telegram_post

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Telegram –ø–æ—Å—Ç–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        session.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}")


@router.put("/{post_id}", response_model=TelegramPostRead)
async def update_telegram_post(
    post_id: int,
    settings: TelegramPostSettings,
    background_tasks: BackgroundTasks,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user_optional)
):
    """
    –û–±–Ω–æ–≤–∏—Ç—å (–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å) —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Telegram –ø–æ—Å—Ç
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
    telegram_post = session.get(TelegramPost, post_id)
    if not telegram_post:
        raise HTTPException(status_code=404, detail="Telegram –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
    news_draft = session.get(NewsGenerationDraft, telegram_post.news_draft_id)
    if not news_draft:
        raise HTTPException(status_code=404, detail="–°–≤—è–∑–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é
    from database.models import Article
    article = session.get(Article, news_draft.article_id)
    if not article:
        raise HTTPException(status_code=404, detail="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        ai_service = get_ai_service()

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        published_url = None
        if news_draft.bitrix_id:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            # TODO: –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑ Bitrix API
            project_urls = {
                "gynecology.school": f"https://gynecology.school/content/articles/news/{news_draft.bitrix_id}/",
                "therapy.school": f"https://therapy.school/content/articles/news/{news_draft.bitrix_id}/",
                "pediatrics.school": f"https://pediatrics.school/content/articles/news/{news_draft.bitrix_id}/"
            }
            published_url = project_urls.get(news_draft.project)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        generated_post = await ai_service.generate_telegram_post(
            article_text=news_draft.generated_news_text or article.content,
            article_title=news_draft.generated_seo_title or article.title,
            article_url=published_url,
            settings=settings
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        telegram_post.hook_type = settings.hook_type
        telegram_post.disclosure_level = settings.disclosure_level
        telegram_post.call_to_action = settings.call_to_action
        telegram_post.include_image = settings.include_image
        telegram_post.post_text = generated_post
        telegram_post.character_count = len(generated_post)

        session.commit()
        session.refresh(telegram_post)

        return telegram_post

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Telegram –ø–æ—Å—Ç–∞: {e}")
        session.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}")


@router.delete("/{post_id}")
async def delete_telegram_post(
    post_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user_optional)
):
    """
    –£–¥–∞–ª–∏—Ç—å Telegram –ø–æ—Å—Ç
    """
    telegram_post = session.get(TelegramPost, post_id)
    if not telegram_post:
        raise HTTPException(status_code=404, detail="Telegram –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    session.delete(telegram_post)
    session.commit()

    return {"message": "Telegram –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}


@router.post("/{post_id}/publish")
async def publish_telegram_post(
    post_id: int,
    request: TelegramPublishRequest,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user_optional)
):
    """
    –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Telegram –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    telegram_post = session.get(TelegramPost, post_id)
    if not telegram_post:
        raise HTTPException(status_code=404, detail="Telegram –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        news_draft = session.get(NewsGenerationDraft, telegram_post.news_draft_id)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = request.post_text

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
        if request.article_url:
            # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram
            post_text += f'\n\n<a href="{request.article_url}">{request.link_button_text}</a>'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        image_url = news_draft.generated_image_url if news_draft and telegram_post.include_image else None
        await send_to_telegram(post_text, image_url)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        telegram_post.is_published = True
        telegram_post.published_at = datetime.utcnow()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
        if request.post_text != telegram_post.post_text:
            telegram_post.post_text = request.post_text
            telegram_post.character_count = len(request.post_text)

        session.commit()
        session.refresh(telegram_post)

        logger.info(f"Telegram –ø–æ—Å—Ç {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª")

        return {
            "message": "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram",
            "post_id": post_id,
            "published_at": telegram_post.published_at
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Telegram –ø–æ—Å—Ç–∞: {e}")
        session.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")