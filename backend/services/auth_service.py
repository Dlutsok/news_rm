"""
–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

from datetime import datetime, timedelta
from typing import Optional, Union
from jose import JWTError, jwt
from passlib.context import CryptContext
from sqlmodel import Session, select
from database.connection import engine
from database.models import User, UserRole, ProjectType, Expense
from core.config import settings

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


class AuthService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    
    @staticmethod
    def verify_password(plain_password: str, hashed_password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å"""
        return pwd_context.verify(plain_password, hashed_password)
    
    @staticmethod
    def get_password_hash(password: str) -> str:
        """–•—ç—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"""
        return pwd_context.hash(password)
    
    @staticmethod
    def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
        """–°–æ–∑–¥–∞—Ç—å JWT —Ç–æ–∫–µ–Ω"""
        to_encode = data.copy()
        if expires_delta:
            expire = datetime.utcnow() + expires_delta
        else:
            expire = datetime.utcnow() + timedelta(hours=settings.ACCESS_TOKEN_EXPIRE_HOURS)
        
        to_encode.update({"exp": expire})
        encoded_jwt = jwt.encode(to_encode, settings.JWT_SECRET_KEY, algorithm=settings.JWT_ALGORITHM)
        return encoded_jwt
    
    @staticmethod
    def verify_token(token: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∏—Ç—å username"""
        try:
            payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM])
            username: str = payload.get("sub")
            if username is None:
                return None
            return username
        except JWTError:
            return None
    
    @staticmethod
    def get_user_by_username(username: str) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
        with Session(engine) as session:
            statement = select(User).where(User.username == username)
            user = session.exec(statement).first()
            return user
    
    @staticmethod
    def authenticate_user(username: str, password: str) -> Optional[User]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = AuthService.get_user_by_username(username)
        if not user:
            return None
        if not AuthService.verify_password(password, user.hashed_password):
            return None
        return user
    
    @staticmethod
    def create_user(username: str, password: str, role: UserRole = UserRole.STAFF, project: Optional[str] = None) -> User:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        hashed_password = AuthService.get_password_hash(password)
        
        with Session(engine) as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            existing_user = session.exec(
                select(User).where(User.username == username)
            ).first()
            
            if existing_user:
                raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è enum (–∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º)
            normalized_project: Optional[str] = None
            try:
                if project:
                    try:
                        # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ enum
                        normalized_project = ProjectType(project).value
                    except ValueError:
                        try:
                            # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –∏–º—è enum (GYNECOLOGY)
                            normalized_project = ProjectType[project].value
                        except KeyError:
                            normalized_project = None
            except Exception:
                normalized_project = None

            user = User(
                username=username,
                hashed_password=hashed_password,
                role=role,
                project=normalized_project
            )
            
            session.add(user)
            session.commit()
            session.refresh(user)
            
            return user
    
    @staticmethod
    def get_users() -> list[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with Session(engine) as session:
            statement = select(User)
            users = session.exec(statement).all()
            return list(users)
    
    @staticmethod
    def initialize_admin():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        admin_username = settings.ADMIN_USERNAME
        admin_password = settings.ADMIN_PASSWORD
        
        with Session(engine) as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
            admin_user = session.exec(
                select(User).where(User.role == UserRole.ADMIN)
            ).first()
            
            if not admin_user:
                print(f"üîß Creating initial admin user: {admin_username}")
                try:
                    AuthService.create_user(admin_username, admin_password, UserRole.ADMIN)
                    print("‚úÖ Admin user created successfully")
                except ValueError as e:
                    print(f"‚ö†Ô∏è Admin user creation skipped: {e}")

    @staticmethod
    def delete_user(user_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        with Session(engine) as session:
            user = session.get(User, user_id)
            if not user:
                return False
            
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            expenses_statement = select(Expense).where(Expense.user_id == user_id)
            expenses = session.exec(expenses_statement).all()
            for expense in expenses:
                session.delete(expense)
            
            # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session.delete(user)
            session.commit()
            return True

    @staticmethod
    def update_user_password(user_id: int, new_password: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with Session(engine) as session:
            user = session.get(User, user_id)
            if not user:
                return False
            user.hashed_password = AuthService.get_password_hash(new_password)
            session.add(user)
            session.commit()
            return True


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
auth_service = AuthService()