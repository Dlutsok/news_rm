#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–∂–∏–º–∫–∏ —Å—Ç–∞—Ç—å–∏ (–ø–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è endpoint)
"""

import os
import sys
import time
import asyncio
from dotenv import load_dotenv

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DATABASE_URL –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
os.environ['DATABASE_URL'] = "postgresql://postgres:medical2024@localhost:5432/news_aggregator"

sys.path.insert(0, '.')

from database.connection import DatabaseSession
from database.models import Article, ProjectType
from services.ai_service import AIService
from sqlmodel import select

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv(env_path)

print("=" * 60)
print("üß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–∂–∏–º–∫–∏ —Å—Ç–∞—Ç—å–∏")
print("=" * 60)


async def test_summarize_endpoint():
    """–ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã endpoint /api/news-generation/summarize"""

    print("\nüìù –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é –∏–∑ –ë–î")
    print("-" * 60)

    start_time = time.time()

    try:
        with DatabaseSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç—å—é
            stmt = select(Article).order_by(Article.id.desc()).limit(1)
            article = session.exec(stmt).first()

            if not article:
                print("‚ùå –°—Ç–∞—Ç–µ–π –≤ –ë–î –Ω–µ—Ç!")
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–∏
            article_id = article.id
            article_title = article.title
            article_content = article.content

            elapsed = time.time() - start_time
            print(f"‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ {elapsed:.2f}s")
            print(f"ID: {article_id}")
            print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_title[:80]}...")
            print(f"–ö–æ–Ω—Ç–µ–Ω—Ç: {len(article_content) if article_content else 0} —Å–∏–º–≤–æ–ª–æ–≤")

    except Exception as e:
        elapsed = time.time() - start_time
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø–æ—Å–ª–µ {elapsed:.2f}s: {e}")
        return False

    print("\nüìù –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å")
    print("-" * 60)

    try:
        ai_service = AIService()
        print("‚úÖ AI —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI: {e}")
        return False

    print("\nüìù –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∂–∏–º–∫—É —á–µ—Ä–µ–∑ AI")
    print("-" * 60)

    ai_start_time = time.time()

    try:
        print("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥)")

        summary, metrics = await ai_service.summarize_article(
            article_content=article_content,
            article_title=article_title,
            project=ProjectType.GYNECOLOGY
        )

        elapsed = time.time() - ai_start_time
        print(f"‚úÖ –í—ã–∂–∏–º–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {elapsed:.2f}s")
        print(f"–ú–æ–¥–µ–ª—å: {metrics.get('model_used')}")
        print(f"–¢–æ–∫–µ–Ω—ã: {metrics.get('tokens_used')}")
        print(f"\nüìÑ –í—ã–∂–∏–º–∫–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(summary.summary[:200] + "...")
        print(f"\nüìä –§–∞–∫—Ç—ã: {len(summary.facts)} —à—Ç.")

        total_time = time.time() - start_time
        print(f"\n‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø: {total_time:.2f}s")

        if total_time > 60:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–æ 60 —Å–µ–∫—É–Ω–¥!")
            print("   –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç timeout –≤ production!")

        return True

    except Exception as e:
        elapsed = time.time() - ai_start_time
        total_time = time.time() - start_time
        print(f"‚ùå –û—à–∏–±–∫–∞ AI –ø–æ—Å–ª–µ {elapsed:.2f}s: {e}")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {total_time:.2f}s")

        import traceback
        traceback.print_exc()
        return False


async def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞"""

    result = await test_summarize_endpoint()

    print("\n" + "=" * 60)
    if result:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–∂–∏–º–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
    print("=" * 60)

    return 0 if result else 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
